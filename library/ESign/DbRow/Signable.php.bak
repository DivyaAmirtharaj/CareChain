<?php

namespace	ESign;

/**
 * Abstract	implementation of	SignableIF which represents	a	signable row
 * in	the	database.
 *
 * Copyright (C) 2013	OEMR 501c3 www.oemr.org
 *
 * LICENSE:	This program is	free software; you can redistribute	it and/or
 * modify	it under the terms of	the	GNU	General	Public License
 * as	published	by the Free	Software Foundation; either	version	3
 * of	the	License, or	(at	your option) any later version.
 * This	program	is distributed in	the	hope that	it will	be useful,
 * but WITHOUT ANY WARRANTY; without even	the	implied	warranty of
 * MERCHANTABILITY or	FITNESS	FOR	A	PARTICULAR PURPOSE.	See	the
 * GNU General Public	License	for	more details.
 * You should	have received	a	copy of	the	GNU	General	Public License
 * along with	this program.	If not,	see	<http://opensource.org/licenses/gpl-license.php>;.
 **/
 
require_once $GLOBALS['srcdir'].'/ESign/SignableIF.php';
require_once $GLOBALS['srcdir'].'/ESign/Signature.php';
require_once $GLOBALS['srcdir'].'/ESign/Utils/Verification.php';

abstract class DbRow_Signable	implements SignableIF
{
		private	$_signatures = array();
		private	$_tableId	=	null;
		private	$_tableName	=	null;
		private	$_verification = null;

		public function	__construct($tableId,	$tableName)
		{
				$this->_tableId	=	$tableId;
				$this->_tableName	=	$tableName;
				$this->_verification = new Utils_Verification();
		}
		
		public function	getSignatures()
		{
				$this->_signatures = array();
				
				$statement = "SELECT E.id, E.tid,	E.table, E.uid,	U.fname, U.lname,	E.datetime,	E.is_lock, E.amendment,	E.hash,	E.signature_hash FROM	esign_signatures E ";
				$statement .=	"JOIN	users	U	ON E.uid = U.id	";
				$statement .=	"WHERE E.tid = ? AND E.table = ? ";
				$statement .=	"ORDER BY	E.datetime ASC";
				$result	=	sqlStatement($statement, array(	$this->_tableId, $this->_tableName ));
				
				while	($row	=	sqlFetchArray($result))	{
						$signature = new Signature(
								$row['id'],
								$row['tid'],
								$row['table'],
								$row['is_lock'],
								$row['uid'],
								$row['fname'],
								$row['lname'],
								$row['datetime'],
								$row['hash'],
								$row['amendment'],
								$row['signature_hash']
						);
						$this->_signatures[]=	$signature;
				}
				
				return $this->_signatures;
		}
		
		/**
		 * Get the hash	of the last	signature	of type	LOCK.
		 *
		 * This	is used	for	comparison with	a	current	hash to
		 * verify	data integrity.
		 *
		 * @return sha1|empty	string
		 */
		protected	function getLastLockHash()
		{
				$statement = "SELECT E.tid,	E.table, E.hash	FROM esign_signatures	E	";
				$statement .=	"WHERE E.tid = ? AND E.table = ? AND E.is_lock = ? ";
				$statement .=	"ORDER BY	E.datetime DESC	LIMIT	1";
				$row = sqlQuery($statement,	array( $this->_tableId,	$this->_tableName, SignatureIF::ESIGN_LOCK ));
				$hash	=	null;
				if ($row &&	isset($row['hash'])) {
						$hash	=	$row['hash'];
				}

				return $hash;
		}
		
		public function	getTableId()
		{
				return $this->_tableId;
		}
		
		public function	renderForm()
		{
				include	'views/esign_signature_log.php';
		}
		
		public function	isLocked()
		{
				$statement = "SELECT E.is_lock FROM	esign_signatures E ";
				$statement .=	"WHERE E.tid = ? AND E.table = ? AND is_lock = ? ";
				$statement .=	"ORDER BY	E.datetime DESC	LIMIT	1	";
				$row = sqlQuery($statement,	array( $this->_tableId,	$this->_tableName, SignatureIF::ESIGN_LOCK ));
				if ($row &&	$row['is_lock']	== SignatureIF::ESIGN_LOCK)	{
						return true;
				}
				
				return false;
		}

		public function	sign($userId,	$lock, $amendment	=	null)
		{
				if ($lock == false){
					$encrypt="no";
				}
				else
				{ $encrypt = "yes";}
				$encounter_id	=	$this->_tableId;
				//Get	Patient	Data
				$pat_sql = "select concat(p.fname,' ',p.lname) as	patient_name,	concat(p.fname,p.lname)	as patient_fullname, date_format(dob,'%m-%d-%Y') as	patient_dob,concat(u.fname,' ',u.lname)	AS provider_name,	";
				$pat_sql.= "e.facility,	date_format(e.date,'%m-%d-%Y') as	encounter_date,	p.pid	as pid from	form_encounter e,	users	u, patient_data	p	";
				$pat_sql.= "where	e.encounter=".$this->_tableId."	 and e.provider_id = u.id	and	p.pid=e.pid";

				$pat_res = sqlQuery($pat_sql);

				$trgt_dir='../../../../../CloudStorage/GoogleDrive/'.$pat_res[patient_fullname];
			 
			 //Get Encounter Data
				$visit_res = sqlStatement("select	sort_ord as	Line_number, reason	as Encounter from	visits where encounter=? order by	sort_ord", $this->_tableId);
				$visit_rows	=	array();
				while	 ($rows	=	sqlFetchArray($visit_res)) {
						$visit_rows[]	=	$rows;
			 	}
				$pid	=	$pat_res['pid'];

				//Get	Current	Blockchain status	for	the	patient
				$curr_block_sql	=	"select	curr_block_hash_key, next_block_number from	patient_access_onsite	where	pid=".$pid;
				$curr_block_res	=	sqlQuery($curr_block_sql);
				$next_block_number = $curr_block_res['next_block_number'];
			
				if ($next_block_number < 1){ 
					
					//Genesis	Block.	Just insert	Patient	details	on it
							$json_gdata	=	(object) ['patient_name' =>	$pat_res['patient_name'],
								'patient_dob' =>	$pat_res['patient_dob'],
					 			'note'	=> "Genesis Block"];
					 
					 		$gen_block_data = json_encode($json_gdata,	JSON_PRETTY_PRINT);
					 		$gen_block_size = strlen($gen_block_data);
							$gen_block_sign_key = hash('sha256',	$gen_block_data);

							$gen_block_ins_sql = "INSERT INTO	blockchain(block_hash_key, pid,	block_size,	block_number,	block_data)	".
							"values('".$gen_block_sign_key."',".$pid.",".	$gen_block_size.",0,'".$gen_block_data."')";
							sqlStatement($gen_block_ins_sql);
							$next_block_number = $next_block_number	+	1; 
						
							$fp	=	fopen('results.json',	'w');
							fwrite($fp,$gen_block_data);
							fclose($fp); 
							copy('results.json',$trgt_dir.'/'.$gen_block_sign_key.'.json');
							//Created	Genesis	block	and	assign the Genesis block key as	the	prev key for the actual	block
							$prev_block_hash_key = $gen_block_sign_key;	
				 }
				 else	{
						 $prev_block_hash_key	=	$curr_block_res['curr_block_hash_key'];
				 }

				$json_data = (object)	[
					'prev_block_hask_key'	=> $prev_block_hash_key,
					'patient_name' =>	$pat_res['patient_name'],
					'patient_dob'	=> $pat_res['patient_dob'],
					'provider_name'	=> $pat_res['provider_name'],
					'encounter_date' =>	$pat_res['encounter_date'],	
					'encounters' =>	$visit_rows	];
				
				$block_data	=	json_encode($json_data,	JSON_PRETTY_PRINT);
				$block_size	=	strlen($block_data);
				$block_sign_key	=	hash('sha256', $block_data);
				
				
				$insert_block_sql	=	"INSERT	INTO zblockchain(encounter_id,block_data)	values(".$encounter_id.",'".$block_data."')	ON DUPLICATE KEY UPDATE	block_data='".$block_data."'";
				sqlStatement($insert_block_sql);
			
				// Updating	Next Hash	Key	on the last	block	for	the	patient	to the latest	data block key
				$updt_curr_block_sql = "UPDATE blockchain	set	next_block_hash_key='".$block_sign_key."'	where	next_block_hash_key	is null	and	pid=".$pid;
				sqlStatement($updt_curr_block_sql);

				$block_ins_sql = "INSERT INTO	blockchain(block_hash_key, pid,	prev_block_hash_key, block_size, block_number, block_data) ".
				"values('".$block_sign_key."',".$pid.",'".$prev_block_hash_key."',".$block_size.",".$next_block_number.",'".$block_data."')	".
				"ON	DUPLICATE	KEY	UPDATE block_data='".$block_data."', block_hash_key='".$block_sign_key."'";
				sqlStatement($block_ins_sql);
					
				 $next_block_number	=	$next_block_number + 1;	

				$updt_curr_stat_block_sql	=	"UPDATE	patient_access_onsite	set	curr_block_hash_key='".$block_sign_key."', next_block_number=".$next_block_number."	where	pid	=	".$pid;
				sqlStatement($updt_curr_stat_block_sql);

				$fp	=	fopen('results.json',	'w');
				fwrite($fp,$encrypt);
				fwrite($fp,$block_data);
				fclose($fp);
			 
				$block_sign	=	hash_file('sha256',	'results.json');
				
				copy('results.json',$trgt_dir.'/'.$block_sign.'.json');

				$statement = "INSERT INTO	`esign_signatures` ( `tid`,	`table`, `uid`,	`datetime`,	`is_lock`, `hash`, `amendment`,	`signature_hash` ) ";
				$statement .=	"VALUES	(	?, ?,	?, NOW(),	?, ?,	?, ? ) ";
				
				// Make	type string
				$isLock	=	SignatureIF::ESIGN_NOLOCK;
				if ($lock) {
						$isLock	=	SignatureIF::ESIGN_LOCK;
				}
				
				// Create	a	hash of	the	signable object	so we	can	verify it's	integrity
				$hash	=	$this->_verification->hash($this->getData());
				
				// Crate a hash	of the signature data	itself.	This is	the	same data	as Signature::getData()	method
				$signature = array(
						$this->_tableId,
						$this->_tableName,
						$userId,
						$isLock,
						$hash,
						$amendment );
				$signatureHash = $this->_verification->hash($signature);
				
				// Append	the	hash of	the	signature	data to	the	insert array before	we insert
				$signature[]=	$signatureHash;
				$id	=	sqlInsert($statement,	$signature);
				
				if ($id	===	false) {
						throw	new	\Exception("Error	occured	while	attempting to	insert a signature into	the	database.");
				}
				
				return $id;
		}
		
		public function	verify()
		{
				$valid = true;
				// Verify	the	signable data	integrity
				// Check to	see	if this	SignableIF is	locked
				if ($this->isLocked()) {
						$signatures	=	$this->getSignatures();
				
						// SignableIF	is locked, so	if it	has	any	signatures,	make sure	it hasn't	been edited	since	lock
						if (count($signatures))	{
								// Verify	the	data of	the	SignableIF object
								$lastLockHash	=	$this->getLastLockHash();
								$valid = $this->_verification->verify($this->getData(),	$lastLockHash);
								
								if ($valid === true) {
										// If	still	vlaid, verify	each signatures' integrity
										foreach	($signatures as	$signature)	{
												if ($signature instanceof	SignatureIF) {
														$valid = $signature->verify();
														if ($valid === false)	{
																break;
														}
												}
										}
								}
						}
				}
				
				return $valid;
		}
}
